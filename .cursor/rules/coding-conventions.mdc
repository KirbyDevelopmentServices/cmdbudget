---
description: 
globs: 
alwaysApply: true
---
---
description: Coding conventions and patterns for cmdbudget
globs: ["*.py"]
alwaysApply: true
---

# Coding Conventions

Follow these established coding conventions for all new code:

## Type Annotations
- Use comprehensive type annotations for all function signatures
- Annotate variables where practical for clarity
- Use appropriate types from the `typing` module (List, Dict, Optional, etc.)

## Error Handling
- Implement robust error handling for all external operations
- Focus especially on file I/O, data parsing (CSV, YAML), and user input validation
- Use specific exception types rather than catching general exceptions
- Provide informative error messages for user-facing errors

## Modularity & DRY Principles
- Actively refactor to ensure high cohesion within modules
- Maintain low coupling between modules
- Eliminate code duplication by creating reusable functions or classes
- Use established abstractions (e.g., TransactionOperations for data access)

## Clarity Over Brevity
- Write clear, readable code over clever, compact code
- Use meaningful variable and function names
- Break down complex operations into clearly named helper functions

## User Interaction
- Channel ALL user interaction through the `cmdbudget/display.py` module
- Use Display.message(), Display.prompt(), Display.table() consistently
- Never use direct print() or input() calls in application code

## Architecture Adherence
- Strictly adhere to the established modular architecture
- UI logic belongs in cli.py
- Core processing in transaction_processor.py
- Data management orchestration in transactions_manager.py
- Low-level data access in transaction_operations.py

## Design Patterns
- Data Class Pattern: Use for Transaction objects
- Factory Method Pattern: Use for Transaction creation
- Command Pattern: Follow in the menu structure
- Strategy Pattern: Apply to different reporting methods
- Facade Pattern: Maintain with the Display class