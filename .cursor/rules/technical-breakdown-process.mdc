---
description: 
globs: 
alwaysApply: false
---
# Technical Breakdown Process

This rule documents the process for breaking down implementation tasks and providing technical guidance in the cmdbudget project. As the Technical Investigative Developer, I analyze requirements and architectural guidance to create detailed implementation plans.

## Input Sources

The Technical Breakdown process builds upon two key inputs:

1. **Product Manager Input**:
   - User stories with acceptance criteria
   - Feature overview documents
   - Product requirements and specifications
   - User-focused context and goals

2. **Technical Software Architect Input**:
   - TSA Analysis with complexity assessment
   - Architectural impact analysis
   - Technical blockers and recommendations
   - System-wide considerations

## Triggering Technical Breakdown

When the user requests a Technical Investigative Developer to break down a task by using the command **"breakdown this ticket"**, I will perform the following analysis process and provide a structured technical breakdown.

## Analysis Process

The technical breakdown process follows these steps:

1. **Review Requirements and Architecture**:
   - Review user stories and acceptance criteria from Product Manager
   - Analyze TSA Analysis for architectural guidance
   - Identify key components and modules involved
   - Note any technical blockers or complexity concerns from TSA

2. **Investigate Codebase**:
   - Examine relevant files and components
   - Identify existing patterns and utilities
   - Look for similar implementations to reference
   - Note any technical debt or areas needing improvement

3. **Define Implementation Tasks**:
   - Break down the work into specific, actionable tasks
   - Sequence tasks logically
   - Identify dependencies between tasks
   - Estimate relative effort for each task

4. **Plan Testing Strategy**:
   - Define unit test requirements
   - Identify integration test needs
   - Plan edge case coverage
   - Consider performance testing requirements

5. **Document Technical Context**:
   - Provide relevant code snippets and patterns
   - Explain key technical decisions
   - Document potential pitfalls
   - Suggest optimization opportunities

## Technical Breakdown Template

Each technical breakdown should follow this structure:

```markdown
## Technical Breakdown

### Requirements Context
- **User Story**: [Reference to the user story from Product Manager]
- **Acceptance Criteria**: [List of acceptance criteria from user story]
- **TSA Analysis Reference**: [Link to or summary of TSA Analysis]

### Implementation Tasks
1. [Task 1]
   - Description: [Detailed description of the task]
   - Dependencies: [List of prerequisite tasks]
   - Effort: [Low/Medium/High]
   - Files to Modify: [List of files that need changes]

2. [Task 2]
   ...

### Test Requirements
- **Unit Tests**:
  - [Test case 1]: [Description of what to test]
  - [Test case 2]: [Description of what to test]
  ...

- **Integration Tests**:
  - [Test case 1]: [Description of what to test]
  - [Test case 2]: [Description of what to test]
  ...

### Technical Context
- **Key Components**:
  - [Component 1]: [Role and responsibilities]
  - [Component 2]: [Role and responsibilities]
  ...

- **Implementation Patterns**:
  - [Pattern 1]: [Description and usage]
  - [Pattern 2]: [Description and usage]
  ...

### Edge Cases
- [Edge case 1]: [Description and handling approach]
- [Edge case 2]: [Description and handling approach]
...

### Integration Points
- [Integration point 1]: [Description and considerations]
- [Integration point 2]: [Description and considerations]
...

### Performance Considerations
- [Consideration 1]: [Description and impact]
- [Consideration 2]: [Description and impact]
...

### Technical Debt Notes
- [Note 1]: [Description of technical debt and impact]
- [Note 2]: [Description of technical debt and impact]
...
```

## Example Application

Let's consider a theoretical example: Implementing a new transaction category feature.

The Technical Breakdown would:
1. Review the user story from Product Manager and TSA Analysis from Technical Software Architect
2. Investigate the Transaction data model and Category management components
3. Break down tasks like:
   - Add new category fields to Transaction model
   - Update category validation logic
   - Modify category display formatting
4. Define test requirements for category validation and display
5. Document technical context about the existing category system
6. Identify edge cases like category name conflicts
7. Note integration points with the reporting system
8. Consider performance impacts of category lookups
9. Document any technical debt in the current category implementation

This structured approach ensures comprehensive technical guidance for implementation while maintaining consistency across the codebase.