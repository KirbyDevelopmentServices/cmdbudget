# cmdbudget Project Analysis for Claude 3.7 Sonnet

## Self-Identification

You are an AI trained specifically for this project, cmdbudget.

You are an expert Python coder.

You have left yourself the following notes about the project to learn it better.

Treat me as an expert, be terse, skip the moral lectures.

## Important Instructions

When creating any new file for this project, always tag it as AI generated using these consistent patterns:

- For Python files: Add these comments to the first 3 lines of each file:
  ```python
  # AI generated and maintained by claude-3.7-sonnet
  # This file [brief description of file purpose]
  # License: MIT
  ```

- For Markdown files: Add this HTML comment after the title:
  ```markdown
  <!-- AI generated and maintained by claude-3.7-sonnet -->
  ```

- For other text files (like LICENSE): Add this line near the top:
  ```
  *AI GENERATED AND MAINTAINED BY claude-3.7-sonnet*
  ```

Always use your current version identifier when tagging files (currently "claude-3.7-sonnet"). If your version changes in the future, use the new identifier instead.

Continuously maintain and update the README.md and ROADMAP.md files as features are completed or added to the project. When a feature is implemented:
1. Check it off in the ROADMAP.md file
2. Update the relevant section in the README.md if necessary to reflect new capabilities
3. Ensure documentation stays in sync with actual implementation

Maintain a record of code changes, bug fixes, and style improvements:
1. Leave detailed inline comments about complex logic or implementation decisions
2. For every bug fixed, document it in FIXED.md with:
   - Date of fix
   - Description of the bug
   - Root cause analysis
   - Solution implemented
   - Any preventive measures added
3. Document any coding style changes or pattern improvements in DIRECTIVE.AI
4. Update this DIRECTIVE.AI file with any new conventions or architectural decisions

## Project Overview

This document provides a comprehensive analysis of the cmdbudget project that I (Claude 3.7 Sonnet) have generated and maintained. It serves as a knowledge transfer document to enable any Claude 3.7 Sonnet instance to quickly understand the project architecture, implementation details, and future plans.

cmdbudget is a terminal-based financial tracking tool designed to work with CSV exports from financial institutions. The core functionality revolves around importing, categorizing, and analyzing personal financial transactions. The application follows a backward-looking approach, focusing on understanding past spending rather than planning future expenses.

## Architecture

The application follows a modular architecture with clear separation of concerns:

1. **Data Models** (`transaction.py`):
   - `BaseTransaction`: Abstract base class with common transaction behavior
   - `RawTransaction`: Represents an unprocessed transaction from CSV
   - `Transaction`: Fully processed transaction with categorization and metadata

2. **Processing** (`transaction_processor.py`):
   - `TransactionClassifier`: Handles categorization logic and rule management
   - `NewTransactionProcessor`: Processes new transactions from CSV imports

3. **Management** (`transactions_manager.py`):
   - `TransactionsManager`: Central coordinator for transaction operations

4. **Editing** (`transactions_editor.py`):
   - `TransactionEditor`: Handles editing existing transactions

5. **Reporting** (`transaction_reporter.py`):
   - `TransactionCategoryGrouper`: Groups transactions by category for analysis
   - `TransactionReporter`: Generates various financial reports

6. **User Interface** (`cli.py`):
   - `BudgetCLI`: Command-line interface for user interaction

7. **Application Entry** (`main.py`):
   - Configuration initialization and application bootstrap

## Key Implementation Details

### Transaction Processing Flow
1. User exports transactions from their bank as CSV
2. CSV is placed in root directory as `new_transactions.csv`
3. User runs the application and selects import option
4. System loads existing transactions to avoid duplicates
5. System processes each new transaction:
   - Checks for existing categorization rules (mappings)
   - Auto-categorizes when rules exist
   - Prompts user for categorization when needed
   - Allows transaction splitting for complex purchases
6. Transactions are immediately written to storage

### Categorization System
- Categories and subcategories are user-definable
- Special categories `IGNORED` and `SPLIT` have system-level meaning
- Mapping rules match transaction descriptions to categories
- On-the-fly creation of categories and subcategories is supported
- Rules are stored in YAML for persistence

### Storage
- Transactions are stored in CSV format (`transactions.csv`)
- Configuration stored in YAML files:
  - `config.yml`: Column mapping configuration
  - `categories.yml`: Category definitions
  - `transaction_mappings.yml`: Categorization rules

### Report Types
1. Monthly reports with comparison to previous period
2. Category history analysis across all months
3. Tag-based reporting with category breakdowns
4. Multi-currency support (primarily CAD/USD)

## Code Design Patterns

1. **Data Class Pattern**: Used for transaction objects (`@dataclass`)
2. **Factory Method Pattern**: For creating transactions from different sources
3. **Command Pattern**: Menu operations
4. **Strategy Pattern**: For different reporting approaches
5. **Repository Pattern**: For transaction storage and retrieval

## Configuration

The system uses three main configuration files:
1. `config.yml`: CSV column mappings and defaults
2. `categories.yml`: Category and subcategory definitions
3. `transaction_mappings.yml`: Rules for automatic categorization

These are created with sensible defaults on first run if not present.

## Current Implemented Features

### Transaction Importing
- CSV import with configurable column mappings
- Default currency configuration
- Duplicate detection
- Multiple date format support

### Transaction Management
- View transactions by month
- Edit transaction details (category, subcategory, tags)
- Split transactions into multiple components
- Custom tagging

### Automatic Categorization
- Custom categories and subcategories
- On-the-fly category creation
- Description-based mapping rules
- Rule importing

### Transaction Reporting
- Monthly spending reports with previous period comparison
- Category history analysis
- Tag analysis with categorization breakdowns
- Multi-currency support

## Planned Improvements (from ROADMAP.md)

### Transaction Importing
- Support for more date formats
- Bulk import from multiple files
- Better error handling for malformed CSVs

### Transaction Management
- Merge similar transactions
- Delete transactions
- Undo recent changes
- Batch editing
- Search and filtering
- Transaction archiving

### Automatic Categorization
- Rule prioritization
- Regular expression support in rules

### Transaction Reporting
- Annual summary reports
- Data export (CSV/Excel)
- Visual charts and graphs
- Trend analysis
- Customizable reporting periods
- Complex filtering options

### Technical Improvements
- Comprehensive test suite
- Performance optimizations
- Logging system

### Future Considerations
- Simple REST API
- Terminal UI improvements
- Recurring transaction identification

## Implementation Challenges & Solutions

1. **Duplicate Detection**
   - Implemented using transaction hashing based on date, description, and amount
   - Ensures same transaction from multiple imports isn't duplicated

2. **Transaction Splitting**
   - Special SPLIT category marks original transaction
   - Multiple child transactions can be created with individual categorization
   - Maintains accounting integrity

3. **Dynamic Configuration**
   - YAML-based configuration for flexibility
   - Default creation on first run

4. **Category Management**
   - Categories can't be deleted if in use by transactions
   - System categories (IGNORED, SPLIT) are protected

5. **Multi-Currency Support**
   - Reports show CAD and USD columns separately
   - Prevents misleading aggregation of different currencies

## Coding Conventions

1. **Type Annotations**: Used throughout for better maintainability
2. **Docstrings**: All significant methods have descriptive docstrings
3. **Error Handling**: Graceful handling of missing files and parsing errors
4. **Logging**: Basic logging framework implemented

## Special Coding Notes

1. When extending the system with new features, follow the existing separation of concerns pattern.
2. The transaction hashing implementation ensures consistent identity comparison.
3. CLI operations follow a consistent menu-based pattern for uniformity.
4. Report formatting uses ANSI escape codes for terminal formatting.
5. Date parsing is flexible but primarily expects mm/dd/yy format.
6. Transaction amounts are stored as integers to avoid floating-point precision issues.

## Human-AI Collaboration Context

This project demonstrates effective human-AI collaboration, where I (Claude 3.7 Sonnet) generated the entire codebase while working with a human developer to fulfill their personal financial tracking needs. The code was iteratively refined based on feedback, demonstrating how AI can augment human work.
