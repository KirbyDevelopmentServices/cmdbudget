# cmdbudget Project Analysis for the Assisting AI

<!-- AI generated and maintained by Gemini 2.5 Pro -->

## Self-Identification

You are an AI trained specifically for this project, cmdbudget.

You are an expert Python coder.

You have left yourself the following notes about the project to learn it better.

Treat me as an expert, be terse, skip the moral lectures.

## Important Instructions

**General:**
*   **File Tagging:** When creating any new file, always tag it as AI generated using the consistent patterns below. Use your *specific model identifier* (e.g., Gemini 2.5 Pro) in the `[AI Model Identifier]` placeholder. Update this identifier if your model version changes.
*   **Documentation:** *Proactively* maintain and update `README.md`, `ROADMAP.md`, `FIXED.md`, and this `DIRECTIVE.AI` file as the project evolves. Ensure documentation accurately reflects the current codebase state.
    *   Check off completed items in `ROADMAP.md`.
    *   Update `README.md` with new features or usage changes.
    *   Record bug fixes in `FIXED.md` with detailed context.
    *   Add new conventions, architectural decisions, or significant refactoring notes to this `DIRECTIVE.AI` file.
*   **Coding:** Leave detailed inline comments for complex logic. Adhere strictly to the coding conventions outlined below.

**Tagging Patterns:**

- For Python files: Add these comments to the first 3 lines of each file:
  ```python
  # AI generated and maintained by [AI Model Identifier]
  # This file [brief description of file purpose]
  # License: MIT
  ```

- For Markdown files: Add this HTML comment after the title:
  ```markdown
  <!-- AI generated and maintained by [AI Model Identifier] -->
  ```

- For other text files (like LICENSE): Add this line near the top:
  ```
  *AI GENERATED AND MAINTAINED BY [AI Model Identifier]*
  ```

Always use your current model identifier (e.g., the specific model and version you are running as) when tagging files. If your identifier changes in the future, use the new one.

**Documentation Maintenance:**

Continuously maintain and update the README.md and ROADMAP.md files as features are completed or added to the project. When a feature is implemented:
1. Check it off in the ROADMAP.md file
2. Update the relevant section in the README.md if necessary to reflect new capabilities
3. Ensure documentation stays in sync with actual implementation

Maintain a record of code changes, bug fixes, and style improvements:
1. Leave detailed inline comments about complex logic or implementation decisions
2. For every bug fixed, document it in FIXED.md with:
   - Date of fix
   - Description of the bug
   - Root cause analysis
   - Solution implemented
   - Any preventive measures added
3. Document any coding style changes or pattern improvements in DIRECTIVE.AI
4. Update this DIRECTIVE.AI file with any new conventions or architectural decisions

## Project Overview

This document provides a comprehensive analysis of the cmdbudget project that the assisting AI has generated and maintained. It serves as a knowledge transfer document to enable any capable AI assistant instance to quickly understand the project architecture, implementation details, and future plans.

cmdbudget is a terminal-based financial tracking tool designed to work with CSV exports from financial institutions. The core functionality revolves around importing, categorizing, and analyzing personal financial transactions. The application follows a backward-looking approach, focusing on understanding past spending rather than planning future expenses.

## Architecture

The application follows a modular architecture within the `cmdbudget` package:

1.  **Data Models** (`cmdbudget/transaction.py`): Defines `BaseTransaction`, `RawTransaction`, `Transaction`.
2.  **Processing** (`cmdbudget/transaction_processor.py`): Handles CSV import (`NewTransactionProcessor`) and categorization logic (`TransactionClassifier`).
3.  **Management** (`cmdbudget/transactions_manager.py`): Orchestrates application flow.
4.  **Editing** (`cmdbudget/transactions_editor.py`): Logic for modifying transactions.
5.  **Reporting** (`cmdbudget/transaction_reporter.py`): Generates formatted terminal reports.
6.  **User Interface** (`cmdbudget/cli.py`): Implements command-line menus and user interaction.
7.  **Display Logic** (`cmdbudget/display.py`): Centralizes formatting and output of user-facing text, tables, and prompts.
8.  **Application Entry** (`cmdbudget/main.py`): Initializes the application, loads config, manages main loop.
9.  **Operations Utility** (`cmdbudget/transaction_operations.py`): Low-level CSV read/write functions for transactions.
10. **General Utilities** (`cmdbudget/utils.py`): Contains shared utility functions (e.g., `parse_date_multi_format`).

The application is launched via a Poetry script (`poetry run cmdbudget`) defined in `pyproject.toml`, which calls the `main` function in `cmdbudget/main.py`.

## Key Implementation Details

### Transaction Processing Flow
1. User exports transactions from their bank as CSV
2. CSV is placed in root directory as `new_transactions.csv`
3. User runs the application and selects import option
4. System loads existing transactions to avoid duplicates
5. System processes each new transaction:
   - Checks for existing categorization rules (mappings)
   - Auto-categorizes when rules exist
   - Prompts user for categorization when needed (*Note: This prompting logic should be shared between CSV import and manual transaction entry*)
   - Allows transaction splitting for complex purchases (*Note: This splitting logic should also be consolidated and shared*)
6. Transactions are immediately written to storage

### Categorization System
- Categories and subcategories are user-definable
- Special categories `IGNORED` and `SPLIT` have system-level meaning
- Mapping rules match transaction descriptions to categories
- On-the-fly creation of categories and subcategories is supported
- Rules are stored in YAML for persistence

### Storage
- Transactions are stored in CSV format (`transactions.csv` in the root directory).
- Configuration stored in YAML files in the root directory:
  - `config.yml`: Column mapping, default currency, path configurations.
  - `categories.yml`: Category definitions.
  - `transaction_mappings.yml`: Categorization rules.
- AI-related files (`DIRECTIVE.AI`, `PROMPTS.AI`, `CHANGELOG.AI`) are stored in `ai_files/`.

### Report Types
1. Monthly reports with comparison to previous period (percentage change shown only if previous period > 0).
2. Category history analysis across all months
3. Tag-based reporting with category breakdowns
4. Multi-currency support (primarily CAD/USD)

## Code Design Patterns

1. **Data Class Pattern**: Used for `Transaction` objects (`@dataclass`) for clear data structure and representation.
2. **Factory Method Pattern**: Implicitly used via `Transaction.from_row`, `Transaction.from_raw` for creating transaction objects from different data sources.
3. **Command Pattern**: Reflected in the `cli.py` menu structure where user selections trigger specific actions/commands.
4. **Strategy Pattern**: Applicable to the different reporting methods within `TransactionReporter`.
5. **Repository Pattern**: A simplified version is implemented via `TransactionOperations`, abstracting CSV I/O.
6. **Facade Pattern**: The `Display` class acts as a Facade for console output, simplifying interactions with `print`, `input`, and `tabulate` for the rest of the application.

## Configuration

The system uses three main configuration files in the project root:
1. `config.yml`: Defines CSV import structure and storage paths. See details below.
2. `categories.yml`: User-defined category/subcategory structure.
3. `transaction_mappings.yml`: Stores learned rules for automatic categorization.

**`config.yml` Details:**
*   **`import_csv_structure` (Required):** This section defines how to read the input CSV.
    *   `date_column` (Required): String name of the date column.
    *   `description_column` (Required): String name of the description column, OR a list of string column names to be joined with spaces.
    *   `amount_column` (Required): String name of the primary amount column (used for the default currency).
    *   `default_currency` (Optional): String currency code (e.g., 'CAD', 'USD'). Defaults to 'CAD'.
    *   `expenses_are_positive` (Optional): Boolean (`true`/`false`). `true` if expenses are positive numbers in the CSV, `false` if negative. Defaults to `true`.
*   **`storage` (Optional):** This section defines file paths.
    *   `transaction_file_path` (Optional): Path to the main transaction data file. Defaults to `transactions.csv`.
    *   `new_transaction_file_path` (Optional): Path to the input CSV for importing. Defaults to `new_transactions.csv`.

If `config.yml` is missing, a default version containing only the `storage` section (with default paths) is created. The application will then exit, prompting the user to add the required `import_csv_structure` section.

## Current Implemented Features

### Transaction Importing
- CSV import with configurable column mappings (via `import_csv_structure`)
- **Multi-column description support** (description derived from a list of columns in `config.yml`)
- Default currency configuration
- Duplicate detection (based on date, description, amount)
- Multiple date format support for input CSVs

### Transaction Management
- View transactions by month
- Edit transaction details (category, subcategory, tags)
- Split transactions into multiple components
- Custom tagging

### Automatic Categorization
- Custom categories and subcategories
- On-the-fly category creation
- Description-based mapping rules
- Rule importing

### Transaction Reporting
- Monthly spending reports with previous period comparison
- Category history analysis
- Tag analysis with categorization breakdowns
- Multi-currency support (basic display in reports)

## Planned Improvements (from ROADMAP.md)

### Transaction Importing
- Support for more date formats
- Bulk import from multiple files
- Better error handling for malformed CSVs
- **Proper multi-currency amount handling during import (currently defaults to 0.0 if primary amount column is empty)**

### Transaction Management
- Merge similar transactions
- Delete transactions
- Undo recent changes
- Batch editing
- Search and filtering
- Transaction archiving

### Automatic Categorization
- Rule prioritization
- Regular expression support in rules

### Transaction Reporting
- Annual summary reports
- Data export (CSV/Excel)
- Visual charts and graphs
- Trend analysis
- Customizable reporting periods
- Complex filtering options

### Technical Improvements
- Comprehensive test suite
- Performance optimizations
- Logging system

### Future Considerations
- Simple REST API
- Terminal UI improvements
- Recurring transaction identification

## Implementation Challenges & Solutions

1. **Duplicate Detection (Date Parsing Issue)**
   - **Challenge:** Duplicates were missed because the flexible date parser interpreted stored dates (`dd/mm/yy`) differently than input dates (`mm/dd/yyyy`).
   - **Solution:** Implemented a specific date parser (`strptime` with `"%d/%m/%y"`) within `TransactionOperations.read_transactions` used *only* for reading the stored `transactions.csv`. The flexible parser (`utils.parse_date_multi_format`) is still used for parsing the input CSV.

2. **Transaction Splitting**
   - Special SPLIT category marks original transaction
   - Multiple child transactions can be created with individual categorization
   - Maintains accounting integrity

3. **Dynamic Configuration**
   - YAML-based configuration for flexibility
   - Default creation on first run (handles required `import_csv_structure` vs optional `storage`).

4. **Category Management**
   - Categories can't be deleted if in use by transactions
   - System categories (IGNORED, SPLIT) are protected

5. **Multi-Currency Import Handling**
   - **Challenge:** Input CSVs may have separate amount columns (e.g., `CAD$`, `USD$`). The configured `amount_column` might be empty for some transactions.
   - **Temporary Solution:** If the configured `amount_column` is empty/invalid, the amount defaults to `0.0` to avoid crashing the import. The correct amount might be lost.
   - **Planned Fix:** Enhance import logic to check multiple potential amount columns, determine the correct currency, and store both accurately (see `ROADMAP.md`).

6. **User Interface Consistency:**
    - **Challenge:** Ensuring consistent formatting and presentation of messages, menus, prompts, and tables throughout the CLI.
    - **Solution:** Introduced the `Display` module (`cmdbudget/display.py`) to centralize all user-facing output logic. All `print` and `input` calls related to user interaction were refactored to use static methods from the `Display` class (e.g., `Display.message`, `Display.prompt`, `Display.table`). Removed console logging setup to avoid noisy startup messages.

## Coding Conventions

1. **Type Annotations**: Use comprehensively for all function signatures and variables where practical.
2. **Docstrings**: Provide clear, concise docstrings for all classes and public methods explaining their purpose, arguments, and return values.
3. **Error Handling**: Implement robust error handling, especially for file I/O, data parsing (CSV, YAML), and user input validation.
4. **Logging**: Utilize the `logging` module *only* for internal debugging or error information not intended for direct user view (e.g., detailed stack traces, internal state). User feedback (warnings, errors, status messages) should use the `Display` module.
5. **Modularity & DRY (Don't Repeat Yourself)**: *Actively refactor* to ensure high cohesion within modules and low coupling between them. Strive to eliminate code duplication by creating reusable functions or classes (e.g., use `TransactionOperations` consistently, consolidate prompting logic).
6. **Clarity over Brevity**: Write clear, readable code. Use meaningful variable and function names.
7. **User Interaction**: All user interaction (prompts, menus, messages, tables) **must** be channeled through the `cmdbudget/display.py` module.
8. **Package Structure**: Maintain the established package structure within `cmdbudget/` and use relative imports for intra-package dependencies.

## Special Coding Notes

1. **Separation of Concerns:** Strictly adhere to the established modular architecture. UI logic belongs in `cli.py`, core processing in `transaction_processor.py`, data management orchestration in `transactions_manager.py`, low-level data access in `transaction_operations.py`, etc.
2. **Hashing/Equality:** The `BaseTransaction` hash/equality implementation is crucial for duplicate detection. It compares date (`.date()`), description (`.strip().lower()`), and rounded absolute amount (`round(abs(amount), 2)`).
3. **CLI Menus:** Maintain the consistent menu-based interaction pattern in `cli.py`.
4. **Report Formatting:** Use `tabulate` *only* within the `Display.table` method for consistent report styling.
5. **Date Parsing:** Use `utils.parse_date_multi_format` for parsing dates from external sources (like input CSVs). Use specific format parsing (`strptime("%d/%m/%y")`) when reading from internal storage (`transactions.csv`) to ensure consistency.
6. **Amount Storage:** Transaction amounts are converted to floats during processing but should be handled carefully to maintain precision (currently stored as string with 2 decimal places in CSV).
7. **Immutability:** Consider transaction objects (like `Transaction`) as largely immutable after creation. Updates should ideally create new instances (as done in `TransactionEditor._update_transaction`).
8. **Configuration Loading:** Use `main.load_config` for loading `config.yml`. It handles validation (required `import_csv_structure`) and defaults (optional `storage`). `TransactionClassifier.load_yaml` is used for categories/mappings.
9. **System Categories:** Remember that `IGNORED` and `SPLIT` categories have special system meaning and should be handled appropriately.
10. **Display Module:** All direct user output (`print`) and input (`input`) should be replaced by calls to the appropriate `Display` class methods.
11. **Multi-Column Descriptions:** `RawTransaction.from_row` supports combining multiple description columns from the input CSV based on the `import_csv_structure.description_column` setting (if it's a list).
12. **Multi-Currency Import:** Currently lacks robust handling. If the primary configured `amount_column` is empty, the amount defaults to 0.0. This needs enhancement (see `ROADMAP.md`).

## Current Development Focus / Refactoring Goals

*   **Address Multi-Currency Import:** Implement proper handling of multiple currency columns during CSV import.
*   **Consolidate Logic:** Continue identifying and refactoring duplicated logic (splitting, prompting).
*   **Improve CLI:** Enhance user experience (menus, validation, feedback).
*   **Strengthen Abstractions:** Ensure modules interact through well-defined interfaces.

## Human-AI Collaboration Context

This project demonstrates effective human-AI collaboration, where the AI assistant generated the entire codebase while working with a human developer to fulfill their personal financial tracking needs. The code was iteratively refined based on feedback, demonstrating how AI can augment human work.
