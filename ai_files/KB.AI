# cmdbudget Knowledge Base
*AI GENERATED AND MAINTAINED BY Claude 3.7 Sonnet*

This knowledge base contains comprehensive information about the project architecture, implementation details, and technical specifications for the cmdbudget application.

## Project Overview

cmdbudget is a terminal-based financial tracking tool designed to work with CSV exports from financial institutions. The core functionality revolves around importing, categorizing, and analyzing personal financial transactions. The application follows a backward-looking approach, focusing on understanding past spending rather than planning future expenses.

## Architecture

The application follows a modular architecture within the `cmdbudget` package:

1.  **Data Models** (`cmdbudget/transaction.py`): Defines `BaseTransaction`, `RawTransaction`, `Transaction`.
2.  **Processing** (`cmdbudget/transaction_processor.py`): Handles CSV import (`NewTransactionProcessor`) and categorization logic (`TransactionClassifier`).
3.  **Management** (`cmdbudget/transactions_manager.py`): Orchestrates application flow.
4.  **Editing** (`cmdbudget/transactions_editor.py`): Logic for modifying transactions.
5.  **Reporting** (`cmdbudget/transaction_reporter.py`): Generates formatted terminal reports.
6.  **User Interface** (`cmdbudget/cli.py`): Implements command-line menus and user interaction.
7.  **Display Logic** (`cmdbudget/display.py`): Centralizes formatting and output of user-facing text, tables, and prompts.
8.  **Application Entry** (`cmdbudget/main.py`): Initializes the application, loads config, manages main loop.
9.  **Operations Utility** (`cmdbudget/transaction_operations.py`): Low-level CSV read/write functions for transactions.
10. **General Utilities** (`cmdbudget/utils.py`): Contains shared utility functions (e.g., `parse_date_multi_format`).

The application is launched via a Poetry script (`poetry run cmdbudget`) defined in `pyproject.toml`, which calls the `main` function in `cmdbudget/main.py`.

## Key Implementation Details

### Transaction Processing Flow
1. User exports transactions from their bank as CSV
2. CSV is placed in root directory as `new_transactions.csv`
3. User runs the application and selects import option
4. System loads existing transactions to avoid duplicates
5. System processes each new transaction:
   - Checks for existing categorization rules (mappings)
   - Auto-categorizes when rules exist
   - Prompts user for categorization when needed
   - Allows transaction splitting for complex purchases
6. Transactions are immediately written to storage

### Categorization System
- Categories and subcategories are user-definable
- Special categories `IGNORED` and `SPLIT` have system-level meaning
- Mapping rules match transaction descriptions to categories
- On-the-fly creation of categories and subcategories is supported
- Rules are stored in YAML for persistence

### Storage
- Transactions are stored in CSV format (`transactions.csv` in the root directory).
- Configuration stored in YAML files in the root directory:
  - `config.yml`: Column mapping, default currency, path configurations.
  - `categories.yml`: Category definitions.
  - `transaction_mappings.yml`: Categorization rules.
- AI-related files (`KB.AI`, `RULES.AI`) are stored in `ai_files/`.
- Product-related files (`PRD.md`, `ROADMAP.md`, `FIXED.md`) are stored in `product/`.
- Feature breakdowns are stored in `product/features/`.

### Configuration Specification

The system uses three main configuration files in the project root:
1. `config.yml`: Defines CSV import structure and storage paths. See details below.
2. `categories.yml`: User-defined category/subcategory structure.
3. `transaction_mappings.yml`: Stores learned rules for automatic categorization.

**`config.yml` Details:**
*   **`import_csv_structure` (Required):** This section defines how to read the input CSV.
    *   `date_column` (Required): String name of the date column.
    *   `description_column` (Required): String name of the description column, OR a list of string column names to be joined with spaces.
    *   `amount_column` (Required): String name of the primary amount column (used for the default currency).
    *   `default_currency` (Optional): String currency code (e.g., 'CAD', 'USD'). Defaults to 'CAD'.
    *   `expenses_are_positive` (Optional): Boolean (`true`/`false`). `true` if expenses are positive numbers in the CSV, `false` if negative. Defaults to `true`.
*   **`storage` (Optional):** This section defines file paths.
    *   `transaction_file_path` (Optional): Path to the main transaction data file. Defaults to `transactions.csv`.
    *   `new_transaction_file_path` (Optional): Path to the input CSV for importing. Defaults to `new_transactions.csv`.

If `config.yml` is missing, a default version containing only the `storage` section (with default paths) is created. The application will then exit, prompting the user to add the required `import_csv_structure` section.

## Code Design Patterns

1. **Data Class Pattern**: Used for `Transaction` objects (`@dataclass`) for clear data structure and representation.
2. **Factory Method Pattern**: Implicitly used via `Transaction.from_row`, `Transaction.from_raw` for creating transaction objects from different data sources.
3. **Command Pattern**: Reflected in the `cli.py` menu structure where user selections trigger specific actions/commands.
4. **Strategy Pattern**: Applicable to the different reporting methods within `TransactionReporter`.
5. **Repository Pattern**: A simplified version is implemented via `TransactionOperations`, abstracting CSV I/O.
6. **Facade Pattern**: The `Display` class acts as a Facade for console output, simplifying interactions with `print`, `input`, and `tabulate` for the rest of the application.

## Current Implemented Features

### Transaction Importing
- CSV import with configurable column mappings (via `import_csv_structure`)
- **Multi-column description support** (description derived from a list of columns in `config.yml`)
- Default currency configuration
- Duplicate detection (based on date, description, amount)
- Multiple date format support for input CSVs

### Transaction Management
- View transactions by month
- Edit transaction details (category, subcategory, tags)
- Split transactions into multiple components
- Custom tagging

### Automatic Categorization
- Custom categories and subcategories
- On-the-fly category creation
- Description-based mapping rules
- Rule importing

### Transaction Reporting
- Monthly spending reports with previous period comparison
- Category history analysis
- Tag analysis with categorization breakdowns
- Multi-currency support (basic display in reports)

## Planned Improvements
See `product/ROADMAP.md` for detailed plans, organized by feature category.

## Implementation Challenges & Solutions

1. **Duplicate Detection (Date Parsing Issue)**
   - **Challenge:** Duplicates were missed because the flexible date parser interpreted stored dates (`dd/mm/yy`) differently than input dates (`mm/dd/yyyy`).
   - **Solution:** Implemented a specific date parser (`strptime` with `"%d/%m/%y"`) within `TransactionOperations.read_transactions` used *only* for reading the stored `transactions.csv`. The flexible parser (`utils.parse_date_multi_format`) is still used for parsing the input CSV.

2. **Transaction Splitting**
   - Special SPLIT category marks original transaction
   - Multiple child transactions can be created with individual categorization
   - Maintains accounting integrity

3. **Dynamic Configuration**
   - YAML-based configuration for flexibility
   - Default creation on first run (handles required `import_csv_structure` vs optional `storage`).

4. **Category Management**
   - Categories can't be deleted if in use by transactions
   - System categories (IGNORED, SPLIT) are protected

5. **Multi-Currency Import Handling**
   - **Challenge:** Input CSVs may have separate amount columns (e.g., `CAD$`, `USD$`). The configured `amount_column` might be empty for some transactions.
   - **Temporary Solution:** If the configured `amount_column` is empty/invalid, the amount defaults to `0.0` to avoid crashing the import. The correct amount might be lost.
   - **Planned Fix:** Enhance import logic to check multiple potential amount columns, determine the correct currency, and store both accurately (see `ROADMAP.md`).

6. **User Interface Consistency:**
    - **Challenge:** Ensuring consistent formatting and presentation of messages, menus, prompts, and tables throughout the CLI.
    - **Solution:** Introduced the `Display` module (`cmdbudget/display.py`) to centralize all user-facing output logic. All `print` and `input` calls related to user interaction were refactored to use static methods from the `Display` class (e.g., `Display.message`, `Display.prompt`, `Display.table`). Removed console logging setup to avoid noisy startup messages.

## Current Development Focus / Refactoring Goals

*   **Address Multi-Currency Import:** Implement proper handling of multiple currency columns during CSV import.
*   **Consolidate Logic:** Continue identifying and refactoring duplicated logic (splitting, prompting).
*   **Improve CLI:** Enhance user experience (menus, validation, feedback).
*   **Strengthen Abstractions:** Ensure modules interact through well-defined interfaces.

## Human-AI Collaboration Context

This project demonstrates effective human-AI collaboration, where the AI assistant generated the entire codebase while working with a human developer to fulfill their personal financial tracking needs. The code was iteratively refined based on feedback, demonstrating how AI can augment human work.
